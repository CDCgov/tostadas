nextflow_workflow {

    name "Test Workflow TOSTADAS"
    script "workflows/tostadas.nf"
    workflow "TOSTADAS"

    test("Should run without failures - mpxv annotation with VADR") {

        when {
            params {
                // Basic pipeline parameters
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
                outdir = ${outputDir}
                
                // Annotation parameters
                annotation = true
                species = "mpxv"
                vadr = true
                repeatmasker_liftoff = false
                bakta = false
                
                // Submission parameters (disabled for basic test)
                submission = false
                fetch_reports_only = false
                update_submission = false
                sra = false
                genbank = false
                biosample = false
                
                // Help parameter
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Check that key processes completed
            assert workflow.trace.tasks().size() > 0
            
            // Verify metadata validation ran
            def metadataValidationTasks = workflow.trace.tasks().findAll { 
                it.name.contains('METADATA_VALIDATION') 
            }
            assert metadataValidationTasks.size() > 0
            
            // Verify annotation processes ran
            def vadrTasks = workflow.trace.tasks().findAll { 
                it.name.contains('RUN_VADR') 
            }
            assert vadrTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }

    test("Should run without failures - bacterial annotation with BAKTA") {

        when {
            params {
                // Basic pipeline parameters
                meta_path = "${projectDir}/assets/sample_metadata/bacteria_test_metadata.xlsx"
                outdir = ${outputDir}
                
                // Annotation parameters
                annotation = true
                species = "bacteria"
                vadr = false
                repeatmasker_liftoff = false
                bakta = true
                download_bakta_db = true
                
                // Submission parameters (disabled for basic test)
                submission = false
                fetch_reports_only = false
                update_submission = false
                sra = false
                genbank = false
                biosample = false
                
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Check that key processes completed
            assert workflow.trace.tasks().size() > 0
            
            // Verify BAKTA annotation ran
            def baktaTasks = workflow.trace.tasks().findAll { 
                it.name.contains('RUN_BAKTA') 
            }
            assert baktaTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }

    test("Should run with viral annotation using RepeatMasker + Liftoff") {

        when {
            params {
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
                outdir = ${outputDir}
                
                annotation = true
                species = "mpxv"
                vadr = false
                repeatmasker_liftoff = true
                bakta = false
                
                submission = false
                fetch_reports_only = false
                update_submission = false
                sra = false
                genbank = false
                biosample = false
                
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Verify RepeatMasker + Liftoff annotation ran
            def repeatmaskerTasks = workflow.trace.tasks().findAll { 
                it.name.contains('REPEATMASKER_LIFTOFF') 
            }
            assert repeatmaskerTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }

    test("Should run submission workflow for BioSample and SRA") {

        when {
            params {
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
                outdir = ${outputDir}
                
                // Skip annotation for submission-only test
                annotation = false
                
                // Enable submission
                submission = true
                fetch_reports_only = false
                update_submission = false
                sra = true
                genbank = false
                biosample = true
                dry_run = true
                
                // Submission config
                submission_config = "${projectDir}/conf/submission_config.yaml"
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Verify submission processes ran
            def submissionTasks = workflow.trace.tasks().findAll { 
                it.name.contains('SUBMISSION') 
            }
            assert submissionTasks.size() > 0
            
            // Verify wait time calculation
            def waitTimeTasks = workflow.trace.tasks().findAll { 
                it.name.contains('GET_WAIT_TIME') 
            }
            assert waitTimeTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }

    test("Should run submission workflow for BioSample and GenBank") {

        when {
            params {
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
                outdir = ${outputDir}
                
                // Skip annotation for submission-only test
                annotation = false
                
                // Enable submission
                submission = true
                fetch_reports_only = false
                update_submission = false
                sra = false
                genbank = true
                biosample = true
                dry_run = true
                
                // Submission config
                submission_config = "${projectDir}/conf/submission_config.yaml"
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Verify submission processes ran
            def submissionTasks = workflow.trace.tasks().findAll { 
                it.name.contains('SUBMISSION') 
            }
            assert submissionTasks.size() > 0
            
            // Verify wait time calculation
            def waitTimeTasks = workflow.trace.tasks().findAll { 
                it.name.contains('GET_WAIT_TIME') 
            }
            assert waitTimeTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }


    // todo: need to figure out a submission_folder for this
    // test("Should run fetch reports only mode") {

    //     when {
    //         params {
    //             meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
    //             outdir = ${outputDir}
                
    //             annotation = false
                
    //             submission = false
    //             fetch_reports_only = true
    //             update_submission = false
    //             sra = true
    //             genbank = true
    //             biosample = true
                
    //             submission_config = "${projectDir}/conf/submission_config.yaml"
    //             help = false
    //         }
    //     }

    //     then {
    //         assert workflow.success
            
    //         // Should still run submission subworkflow but in fetch mode
    //         def submissionTasks = workflow.trace.tasks().findAll { 
    //             it.name.contains('SUBMISSION') 
    //         }
    //         assert submissionTasks.size() > 0
            
    //         assert snapshot(workflow.out).match()
    //     }
    // }

    // todo: add a test for missing batch files
    // test("Should skip batch with missing files") {

    //     when {
    //         params {
    //             meta_path = "${baseDir}/test_data/metadata/test_batch_missing_files.tsv"
    //             outdir = ${outputDir}
                
    //             annotation = false
    //             submission = true
    //             sra = true
    //             genbank = true
    //             dry_run = true
    //             submission_config = "${projectDir}/conf/submission_config.yaml"
    //             help = false
    //         }
    //     }

    //     then {
    //         // Should succeed but skip batches with missing files
    //         assert workflow.success
            
    //         // Check that warning was logged (this is harder to test directly)
    //         // The workflow should continue with valid batches only
            
    //         assert snapshot(workflow.out).match()
    //     }
    // }

    test("Should exit with help parameter") {

        when {
            params {
                help = true
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
            }
        }

        then {
            // Workflow should exit early with help=true
            assert workflow.success
            
            // Should have minimal task execution
            assert workflow.trace.tasks().size() == 0
        }
    }

    test("Should run complete pipeline with annotation and submission to BioSample and GenBank") {

        when {
            params {
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
                outdir = ${outputDir}
                
                // Enable both annotation and submission
                annotation = true
                species = "mpxv"
                vadr = false
                
                submission = true
                sra = false
                genbank = true
                biosample = true
                dry_run = true
                submission_config = "${projectDir}/conf/submission_config.yaml"
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Verify both annotation and submission processes ran
            def annotationTasks = workflow.trace.tasks().findAll { 
                it.name.contains('RUN_VADR') 
            }
            assert annotationTasks.size() > 0
            
            def submissionTasks = workflow.trace.tasks().findAll { 
                it.name.contains('SUBMISSION') 
            }
            assert submissionTasks.size() > 0
            
            // Verify metadata validation always runs
            def metadataValidationTasks = workflow.trace.tasks().findAll { 
                it.name.contains('METADATA_VALIDATION') 
            }
            assert metadataValidationTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }

        test("Should run complete pipeline with annotation and submission to BioSample, SRA, and GenBank") {

        when {
            params {
                meta_path = "${projectDir}/assets/sample_metadata/mpxv_test_metadata.xlsx"
                outdir = ${outputDir}
                
                // Enable both annotation and submission
                annotation = true
                species = "mpxv"
                vadr = false
                
                submission = true
                sra = true
                genbank = true
                biosample = true
                dry_run = true
                submission_config = "${projectDir}/conf/submission_config.yaml"
                help = false
            }
        }

        then {
            assert workflow.success
            
            // Verify both annotation and submission processes ran
            def annotationTasks = workflow.trace.tasks().findAll { 
                it.name.contains('RUN_VADR') 
            }
            assert annotationTasks.size() > 0
            
            def submissionTasks = workflow.trace.tasks().findAll { 
                it.name.contains('SUBMISSION') 
            }
            assert submissionTasks.size() > 0
            
            // Verify metadata validation always runs
            def metadataValidationTasks = workflow.trace.tasks().findAll { 
                it.name.contains('METADATA_VALIDATION') 
            }
            assert metadataValidationTasks.size() > 0
            
            assert snapshot(workflow.out).match()
        }
    }
}
