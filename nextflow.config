/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   GENERAL INFORMATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

manifest {
    name = 'mpxv_nextflow'
    author = 'AG'
    description = 'nextflow wrapper for running the MPXV pipeline'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.07.1'
    version = 'latest'
}

// Global default params, used in configs
params {
    help = false

    variola = ""

    env_yml = "$projectDir/environment.yml"

    bakta_db_type = "light" // light or full
    download_bakta_db = ""

    docker_container = 'staphb/tostadas:latest'
    docker_container_vadr = 'staphb/vadr:latest'
    scicomp = false

    cleanup = false
    clear_nextflow_log = false
    clear_work_dir = false
    clear_conda_env = false
    clear_nf_results = false

    overwrite_output = true

    val_date_format_flag = 's'
    val_keep_pi = false
    validate_custom_fields = false
    custom_fields_file = "$projectDir/assets/custom_meta_fields/example_custom_fields.json"

    lift_print_version_exit = false 
    lift_print_help_exit = false 
    lift_parallel_processes = 8
    lift_delete_temp_files = 'true'
    lift_coverage_threshold = 0.5
    lift_child_feature_align_threshold = 0.5
    lift_unmapped_features_file_name = 'output.unmapped_features.txt'
    lift_copy_threshold = 1.0
    lift_distance_scaling_factor = 2.0
    lift_flank = 0.0
    lift_overlap = 0.1
    lift_mismatch = 2
    lift_gap_open = 2
    lift_gap_extend = 1
    lift_infer_transcripts = 'false'
    lift_infer_genes = false
    lift_copies = 'false'
    lift_minimap_path = 'N/A' 
    lift_feature_database_name = 'N/A' 
    lift_feature_types = "$projectDir/assets/feature_types.txt"

    vadr_models_dir = "$projectDir/vadr_files/mpxv-models"

    prodigal_tf = ""
    proteins = ""
    bakta_min_contig_length = 5
    bakta_threads = 2
    bakta_genus = 'N/A'
    bakta_species = 'N/A'
    bakta_strain = 'N/A'
    bakta_plasmid = 'unnamed'
    bakta_locus = 'contig'
    bakta_locus_tag = 'autogenerated'
    bakta_translation_table = 11
    bakta_db_path = ""

    req_col_config = "$projectDir/bin/default_config_files/required_columns.yaml"

    run_conda = false
    run_docker = false
    run_singularity = false

    final_liftoff_output_dir = ""
    bakta_output_dir = ""
    vadr_output_dir = ""

    bacteria = false
    virus = true

}
   

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             PROFILES 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

profiles {

    // to register which parameter set to use 
    // by default, will run the virus parameter set (default value set above)
    bacteria {
        params.bacteria = true
        params.virus = false
    }
    virus {
        params.virus = true
        params.bacteria = false
    }

    // actual parameter sets 
    standard {
        try {
            includeConfig "conf/standard_params.config"
        } catch (Exception e) {
            System.err.println("WARNING: Could not load standard_params.config from ${projectDir}/conf/")
        }
    }
    test {
        if ( params.virus == true ) {
            // read in the config 
            try {
                includeConfig "conf/test_virus_params.config" 
            } catch (Exception e) {
                System.err.println("WARNING: Could not load test_virus_params.config from ${projectDir}/conf/")
            }
            // set default values
            params.run_bakta = false

        } else if ( params.bacteria == true ) {
            try {
                includeConfig "conf/test_bacteria_params.config"
            } catch (Exception e) {
                    System.err.println("WARNING: Could not load test_bacteria_params.config from ${projectDir}/conf/")
            }
            // set default values 
            params.run_liftoff = false
            params.run_vadr = false
            params.run_repeatmasker_liftoff = false
        }
    }

    // organism specific repeat library settings
    // if you want to add your own custom library, if you choose to use one of ours state 'varv' to use the 'varv' custom lib or 'mpox' to use the mpox custom lib
    if ( params.variola ) {
	    params.repeat_lib = "$projectDir/assets/lib/varv_repeats_lib.fasta"
    }
    // assumes mpox as default for repeatmasker liftoff subworkflow
    else {
	    params.repeat_lib = "$projectDir/assets/lib/MPOX_repeats_lib.fasta"
    } 


    // run docker + specify settings 
    conda {
        enable_conda           = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.useMamba         = false
        
        // Just for tracking that at least one option was selected
        params.run_docker        = false
        params.run_conda         = true
        params.run_singularity   = false 
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Just for tracking that at least one option was selected
        params.run_docker        = true
        params.run_conda         = false
        params.run_singularity   = false 

        // Specify the container name
        process {
            withLabel: main {
                container = params.docker_container
            }
        }
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        singularity.cacheDir   = "$HOME/.singularity"

        // Just for tracking that at least one option was selected
        params.run_docker        = false
        params.run_conda         = false
        params.run_singularity   = true

        // Specify the container name 
        process {
            withLabel: main {
                container = params.docker_container
            }
        }
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               NEXTFLOW TOWER SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

tower {
    enabled = false
    accessToken = '<your token>'
    workspaceId = '<your workspace id>'
}

