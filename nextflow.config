/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   GENERAL INFORMATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
// To Do, decide what goes where between here and standard params

// Global default params, used in configs
params {
    
    //schema
    schema                = 'nextflow_schema.json'

    // Schema validation default options
    validate_params            = true

    // input paths
    ref_fasta_path        = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.fasta"
    meta_path             = "${projectDir}/assets/metadata_template.xlsx"
    ref_gff_path          = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.gff"

    // validation subworkflow
    val_date_format_flag   = 's'
    val_keep_pi            = false
    validate_custom_fields = false
    custom_fields_file     = "${projectDir}/assets/custom_meta_fields/example_custom_fields.json"

    // viral annotation params
    annotation             = true 
    repeatmasker_liftoff   = true 
    vadr                   = false
    bakta                  = false

    // organism options
    // options = mpxv, variola, rsv, virus - defaults to mpxv, bacteria 
    species = '' 

    // RepeatMasker organism specific repeat library settings
    // if you want to add your own custom library, if you choose to use one of ours state 'varv' to use the 'varv' custom lib or 'mpox' to use the mpox custom lib
    if ( params.species == "variola" ) {
	    repeat_library = "${projectDir}/assets/lib/varv_repeats_lib.fasta"
    }
    // assumes mpox as default for repeatmasker liftoff subworkflow
    else {
	    repeat_library = "${projectDir}/assets/lib/MPOX_repeats_lib.fasta"
    } 

    // bacterial annotation params
    if ( params.species == 'bacteria' ) {
        bakta                = true
        repeatmasker_liftoff = false
        vadr                 = false
    }

    // submission params 
    submission             = true
    genbank                = true
    sra                    = true
    gisaid                 = false
    biosample              = true
    submission_mode        = 'ftp' // 'ftp' or 'sftp'
    submission_output_dir  = "submission_outputs"
    submission_wait_time   = 380 // time in seconds
    submission_config      = "${projectDir}/bin/config_files/<your-ncbi-config>.yaml"
    submission_prod_or_test = "test" // "prod" if submitting
    send_submission_email  = false 
    update_submission      = false

    // general params
    help                     = false
    publish_dir_mode         = 'copy'
    output_dir               = "results"
    // To Do check if we need these three dirs
    bakta_output_dir         = "bakta_outputs"
    vadr_output_dir          = "vadr_outputs"
    final_liftoff_output_dir = "liftoff_outputs"
    val_output_dir           = "validation_outputs"
    vadr_models_dir          = " "

    // environment params
    env_yml                = "${projectDir}/environment.yml"
    enable_conda           = false
    repeatmasker_env_yml   = "${projectDir}/environments/repeatmasker_env.yml"
    vadr_env_yml           = "${projectDir}/environments/vadr_env.yml"

    // cleanup subworkflow
    cleanup                = false
    clear_nextflow_log     = false
    clear_work_dir         = false
    clear_conda_env        = false
    clear_nf_results       = false
    overwrite_output       = true

    // required bakta params
    bakta_db_type           = "light" // light or full
    download_bakta_db       = ""
    bakta_db_path           = ""
    bakta_min_contig_length = 5
    bakta_threads           = 2
    bakta_gram              = "?"
    bakta_genus             = 'N/A'
    bakta_species           = 'N/A'
    bakta_strain            = 'N/A'
    bakta_plasmid           = 'unnamed' 
    bakta_locus             = 'contig'
    bakta_locus_tag         = 'autogenerated'
    bakta_translation_table = 11

    // optional bakta params
    bakta_complete            = ""
    bakta_keep_contig_headers = ""
    bakta_replicons           = ""
    bakta_proteins            = ""
    bakta_skip_trna           = ""
    bakta_skip_tmrna          = ""
    bakta_skip_rrna           = ""
    bakta_skip_ncrna          = ""
    bakta_skip_ncrna_region   = ""
    bakta_skip_crispr         = ""
    bakta_skip_cds            = ""
    bakta_skip_pseudo         = ""
    bakta_skip_sorf           = ""
    bakta_skip_gap            = ""
    bakta_skip_ori            = ""
    bakta_compliant           = true
    bakta_skip_plot           = true
    
    // liftoff annotation
    lift_print_version_exit            = false 
    lift_print_help_exit               = false 
    lift_parallel_processes            = 8
    lift_coverage_threshold            = 0.5
    lift_child_feature_align_threshold = 0.5
    lift_unmapped_features_file_name   = 'output.unmapped_features.txt'
    lift_copy_threshold                = 1.0
    lift_distance_scaling_factor       = 2.0
    lift_flank                         = 0.0
    lift_overlap                       = 0.1
    lift_mismatch                      = 2
    lift_gap_open                      = 2
    lift_gap_extend                    = 1
    lift_minimap_path                  = 'N/A' 
    lift_feature_database_name         = 'N/A' 
    lift_feature_types                 = "${projectDir}/assets/feature_types.txt"

    processed_samples              = "${projectDir}/$output_dir/$submission_output_dir"

    // vadr annotation
    if (params.species == 'mpox') {
        vadr_models_dir  = "${projectDir}/vadr_files/mpxv-models"
    }
    else if (params.species == 'rsv') {
        vadr_models_dir  = "${projectDir}/vadr_files/rsv-models"
    }
}

try {
    includeConfig 'conf/modules.config'
} catch (Exception e) {
    System.err.println("WARNING:Could not load conf/modules.config")
}  

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             PROFILES 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// To Do: align these profiles with nf-core style, also align rest of this config
profiles {    
    test { includeConfig "conf/test_params.config" }

    // run docker + specify settings 
    conda {
        params.enable_conda    = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.useMamba         = false
        
    }
    docker {
        params.enable_conda    = false
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        params.enable_conda    = false
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        singularity.cacheDir   = "$HOME/.singularity"
    }
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.1.1' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}


// Load base.config by default for all pipelines
// includeConfig 'conf/base.config'


// Load modules.config for DSL2 module specific options
// includeConfig 'conf/modules.config'


/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               NEXTFLOW TOWER SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

//tower {
//    enabled = false
//    accessToken = '<your token>'
//    workspaceId = '<your workspace id>'
//}

manifest {
    name = 'mpxv_nextflow'
    author = 'Gupta, OConnell, Rowell, Sivakumar'
    description = 'Nextflow workflow for annotation of viral and bacterial sequences and submission to NCBI databases'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.07.1'
    version = 'latest'
}
