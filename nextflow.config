/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   GENERAL INFORMATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
// To Do, decide what goes where between here and standard params

// Global default params, used in configs
params {
    // input paths
    fasta_path            = "" // path to dir with fasta files that match metadata
    ref_fasta_path        = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.fasta"
    meta_path             = "${projectDir}/assets/custom_meta_fields/custom_fields_MPXV_metadata_Sample_1.xlsx"
    ref_gff_path          = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.gff"

    // validation subworkflow
    val_date_format_flag   = 's'
    val_keep_pi            = false
    validate_custom_fields = false
    custom_fields_file     = "${projectDir}/assets/custom_meta_fields/example_custom_fields.json"
    req_col_config         = "${projectDir}/bin/default_config_files/required_columns.yaml"

    // viral annotation params
    annotation             = true 
    repeatmasker_lifoff    = true 
    liftoff                = false
    vadr                   = false

    // organism specific repeat library settings
    // if you want to add your own custom library, if you choose to use one of ours state 'varv' to use the 'varv' custom lib or 'mpox' to use the mpox custom lib
    if ( params.variola ) {
	    params.repeat_lib = "${projectDir}/assets/lib/varv_repeats_lib.fasta"
    }
    // assumes mpox as default for repeatmasker liftoff subworkflow
    else {
	    params.repeat_lib = "${projectDir}/assets/lib/MPOX_repeats_lib.fasta"
    } 

    // bacterial annotation params 
    bakta                  = false

    // submission params 
    submission             = true
    genbank                = true
    sra                    = true
    submission_output_dir  = "submission_outputs"
    submission_wait_time   = 380 // time in seconds
    submission_config      = "${projectDir}/bin/config_files/<your-ncbi-config>.yaml"
    batch_name             = "batch1"
    submission_database    = "submit"  // must be either: 'submit' (follows existing config), 'genbank', 'sra', 'gisaid', 'biosample', 'joint_sra_biosample', or 'all'
    submission_prod_or_test = "test"    
    send_submission_email  = false 

    // general params
    help                   = false
    output_dir             = ""
    overwrite_output = false
    // To Do check if we need these three dirs
    final_liftoff_output_dir = "liftoff"
    bakta_output_dir       = ""
    vadr_output_dir        = ""
    final_liftoff_output_dir = "liftoff_outputs"
    val_output_dir         = "validation_outputs"

    // taxon-specific params
    variola                = false
    bacteria               = false
    virus                  = false

    // environment params
    env_yml                = "${projectDir}/environment.yml"
    docker_container       = 'staphb/tostadas:latest'
    docker_container_vadr  = 'staphb/vadr:latest'
    scicomp                = false
    run_conda              = false
    run_docker             = false
    run_singularity        = false

    // cleanup subworkflow
    cleanup                = false
    clear_nextflow_log     = false
    clear_work_dir         = false
    clear_conda_env        = false
    clear_nf_results       = false
    overwrite_output       = true

    // batka annotation
    bakta_db_type          = "light" // light or full
    download_bakta_db      = ""
    bakta_db_path           = ""
    prodigal_tf            = ""
    proteins               = ""
    bakta_min_contig_length = 5
    bakta_threads          = 2
    bakta_genus            = 'N/A'
    bakta_species          = 'N/A'
    bakta_strain           = 'N/A'
    bakta_plasmid          = 'unnamed'
    bakta_locus            = 'contig'
    bakta_locus_tag         = 'autogenerated'
    bakta_translation_table = 11

    // liftoff annotation
    lift_print_version_exit            = false 
    lift_print_help_exit               = false 
    lift_parallel_processes            = 8
    lift_delete_temp_files             = 'true'
    lift_coverage_threshold            = 0.5
    lift_child_feature_align_threshold = 0.5
    lift_unmapped_features_file_name   = 'output.unmapped_features.txt'
    lift_copy_threshold                = 1.0
    lift_distance_scaling_factor       = 2.0
    lift_flank                         = 0.0
    lift_overlap                       = 0.1
    lift_mismatch                      = 2
    lift_gap_open                      = 2
    lift_gap_extend                    = 1
    lift_infer_transcripts             = 'false'
    lift_infer_genes                   = false
    lift_copies                        = 'false'
    lift_minimap_path                  = 'N/A' 
    lift_feature_database_name         = 'N/A' 
    lift_feature_types                 = "${projectDir}/assets/feature_types.txt"

    // vadr annotation
    vadr_models_dir  = "${projectDir}/vadr_files/mpxv-models"

}
   

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             PROFILES 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// To Do: align these profiles with nf-core style, also align rest of this config
profiles {    
    // standard { includeConfig "conf/standard_params.config" }
    test { includeConfig "conf/test_params.config" }

    // run docker + specify settings 
    conda {
        enable_conda           = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.useMamba         = false
        
        // Just for tracking that at least one option was selected
        params.run_docker        = false
        params.run_conda         = true
        params.run_singularity   = false 
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        // Just for tracking that at least one option was selected
        params.run_docker        = true
        params.run_conda         = false
        params.run_singularity   = false 

        // Specify the container name
        process {
            withLabel: main {
                container = params.docker_container
            }
        }
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        singularity.cacheDir   = "$HOME/.singularity"

        // Just for tracking that at least one option was selected
        params.run_docker        = false
        params.run_conda         = false
        params.run_singularity   = true

        // Specify the container name 
        process {
            withLabel: main {
                container = params.docker_container
            }
        }
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               NEXTFLOW TOWER SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

tower {
    enabled = false
    accessToken = '<your token>'
    workspaceId = '<your workspace id>'
}

manifest {
    name = 'mpxv_nextflow'
    author = 'Gupta, OConnell, Rowell, Sivakumar'
    description = 'Nextflow workflow for annotation of viral and bacterial sequences and submission to NCBI databases'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.07.1'
    version = 'latest'
}