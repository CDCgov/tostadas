/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   GENERAL INFORMATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
// To Do, decide what goes where between here and standard params

// Global default params, used in configs
params {
    
    // Schema
    schema                       = 'nextflow_schema.json'

    // Schema validation default options
    validate_params              = true

    // Workflow options: biosample_and_sra, genbank, fetch_accessions, full_submission
    workflow                     =  "biosample_and_sra"

    // Input paths
    ref_fasta_path               = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.fasta"
    meta_path                    = "${projectDir}/assets/metadata_template.xlsx"
    ref_gff_path                 = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.gff"

    // Validation subworkflow
    date_format_flag             = 's'  // s = default (YYYY-MM), v = verbose(YYYY-MM-DD), o = original (leaves format unchanged)
    remove_demographic_info      = false // if true, values in host_sex, host_age, race, ethnicity are set to 'Not Provided'
    validate_custom_fields       = false
    custom_fields_file           = "${projectDir}/assets/custom_meta_fields/example_custom_fields.json"

    // Viral annotation params
    annotation                   = true 
    repeatmasker_liftoff         = true 
    vadr                         = false
    bakta                        = false

    // Organism options
    // Options = mpxv, variola, rsv, virus (defaults to mpxv), bacteria, eukaryote
    species                       = '' 

    // RepeatMasker organism specific repeat library settings
    // If you want to add your own custom library, if you choose to use one of ours state 'varv' to use the 'varv' custom lib or 'mpox' to use the mpox custom lib
    if ( params.species == "variola" ) {
	    repeat_library           = "${projectDir}/assets/lib/varv_repeats_lib.fasta"
    }
    // Assumes mpox as default for repeatmasker liftoff subworkflow
    else {
	    repeat_library           = "${projectDir}/assets/lib/mpxv_repeats_lib.fasta"
    } 

    // Bacterial annotation params
    if ( params.species == 'bacteria' ) {
        bakta                    = true
        repeatmasker_liftoff     = false
        vadr                     = false
    }

    // Wastewater specific params
    // wastewater                   = false

    // Submission params 
    submission                   = true
    genbank                      = false
    sra                          = false
    gisaid                       = false
    biosample                    = true
    batch_size                   = 1 //number of samples to submit at once
    submission_mode              = 'ftp' // 'ftp' or 'sftp'
    submission_output_dir        = "submission_outputs"
    final_submission_output_dir  = "final_submission_outputs"
    submission_prod_or_test      = "test" // "prod" if submitting
    submission_config            = "${projectDir}/conf/submission_config.yaml"
    submission_wait_time         = 380 // time in seconds
    send_submission_email        = false 
    update_submission            = false
    biosample_fields_key         = "${projectDir}/assets/biosample_fields_key.yaml"
    updated_meta_path            = "" // pipeline will find this in final_submission_output_dir if it exists
    dry_run                      = false // prints ftp paths files will be uploaded to

    // General params
    help                         = false
    publish_dir_mode             = 'copy'
    save_reference               = false
    outdir                       = "results"
    bakta_output_dir             = "bakta_outputs"
    vadr_output_dir              = "vadr_clean_outputs"
    final_liftoff_output_dir     = "repeatmasker_liftoff_outputs"
    val_output_dir               = "validation_outputs"
    vadr_models_dir              = "${projectDir}/vadr_files/rsv-models"

    // Environment params
    env_yml                      = "${projectDir}/environment.yml"
    repeatmasker_env_yml         = "${projectDir}/environments/repeatmasker_env.yml"
    vadr_env_yml                 = "${projectDir}/environments/vadr_env.yml"

    // Cleanup subworkflow
    cleanup                      = false
    clear_nextflow_log           = false
    clear_work_dir               = false
    clear_conda_env              = false
    clear_nf_results             = false
    overwrite_output             = true

    // Required bakta params
    bakta_db_type                = "light" // light or full
    download_bakta_db            = ""
    bakta_db_path                = ""
    bakta_min_contig_length      = 5
    bakta_threads                = 2
    bakta_gram                   = "?"
    bakta_genus                  = 'N/A'
    bakta_species                = 'N/A'
    bakta_strain                 = 'N/A'
    bakta_plasmid                = 'unnamed' 
    bakta_locus                  = 'contig'
    bakta_locus_tag              = ''
    bakta_translation_table      = 11

    // Optional bakta params
    bakta_complete               = ""
    bakta_keep_contig_headers    = ""
    bakta_replicons              = ""
    bakta_proteins               = ""
    bakta_prodigal_tf            = ""
    bakta_skip_trna              = ""
    bakta_skip_tmrna             = ""
    bakta_skip_rrna              = ""
    bakta_skip_ncrna             = ""
    bakta_skip_ncrna_region      = ""
    bakta_skip_crispr            = ""
    bakta_skip_cds               = ""
    bakta_skip_pseudo            = ""
    bakta_skip_sorf              = ""
    bakta_skip_gap               = ""
    bakta_skip_ori               = ""
    bakta_compliant              = true
    bakta_skip_plot              = true
    
    // Liftoff annotation
    lift_print_version_exit            = false 
    lift_print_help_exit               = false 
    lift_parallel_processes            = 8
    lift_coverage_threshold            = 0.5
    lift_child_feature_align_threshold = 0.5
    lift_unmapped_features_file_name   = 'output.unmapped_features.txt'
    lift_copy_threshold                = 1.0
    lift_distance_scaling_factor       = 2.0
    lift_flank                         = 0.0
    lift_overlap                       = 0.1
    lift_mismatch                      = 2
    lift_gap_open                      = 2
    lift_gap_extend                    = 1
    lift_minimap_path                  = 'N/A' 
    lift_feature_database_name         = 'N/A' 
    lift_feature_types                 = "${projectDir}/assets/feature_types.txt"

    //processed_samples                  = "${projectDir}/$outdir/$submission_output_dir"

    // Vadr annotation
    if (params.species == 'mpox') {
        vadr_models_dir                = "${projectDir}/vadr_files/mpxv-models"
    }
    else if (params.species == 'rsv') {
        vadr_models_dir                = "${projectDir}/vadr_files/rsv-models"
    }
}

//validation {
//    help {
//        enabled = true
//    }
//}

includeConfig 'conf/modules.config'

docker.registry      = 'quay.io'

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             PROFILES 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// To Do: align these profiles with nf-core style, also align rest of this config
profiles {    
    test { includeConfig "conf/test_params.config" }
    aws {
        accessKey = '<Your access key>'
        secretKey = '<Your secret key>'
        client {
            endpoint = '<Your storage endpoint URL>'
            s3PathStyleAccess = true
        }
    }
    azure {
        storage {
            accountName = "<YOUR BLOB ACCOUNT NAME>"
            accountKey = "<YOUR BLOB ACCOUNT KEY>"
        }
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.useMamba         = true
        
    }
    docker {
        conda.enabled          = false
        docker.enabled         = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        conda.enabled          = false
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               NEXTFLOW TOWER SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

//tower {
//    enabled = false
//    accessToken = '<your token>'
//    workspaceId = '<your workspace id>'
//}

manifest {
    name = 'TOSTADAS'
    author = 'Rowell, OConnell, Sivakumar, Gupta'
    description = 'Nextflow workflow for annotation of viral and bacterial sequences and submission to NCBI databases'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.07.1'
    version = 'latest'
}
