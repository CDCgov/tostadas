/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.output_dir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: METADATA_VALIDATION {
        publishDir = [
            path: { "${params.output_dir}/${params.val_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAKTA_BAKTADBDOWNLOAD {
        publishDir = [
            path: { "${params.output_dir}/${params.bakta_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = { 
            def args_list = []

            if (params.bakta_db_type) {
                args_list << "--type ${params.bakta_db_type}"
            } else {
                args_list << "--type light"  // default to light if not specified
            }

            return args_list.join(' ')
        }
    }

    withName: BAKTA_BAKTA {
        publishDir = [
            path: { "${params.output_dir}/${params.bakta_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = { 
            def args_list = []
            
            if (params.bakta_skip_trna) args_list << "--skip-trna"
            if (params.bakta_skip_tmrna) args_list << "--skip-tmrna"
            if (params.bakta_skip_rrna) args_list << "--skip-rrna"
            if (params.bakta_skip_ncrna) args_list << "--skip-ncrna"
            if (params.bakta_skip_ncrna_region) args_list << "--skip-ncrna-region"
            if (params.bakta_skip_crispr) args_list << "--skip-crispr"
            if (params.bakta_skip_cds) args_list << "--skip-cds"
            if (params.bakta_skip_sorf) args_list << "--skip-sorf"
            if (params.bakta_skip_gap) args_list << "--skip-gap"
            if (params.bakta_skip_ori) args_list << "--skip-ori"
            if (params.bakta_compliant) args_list << "--compliant"
            if (params.bakta_complete) args_list << "--complete"
            if (params.bakta_skip_plot) args_list << "--skip-plot"
            if (params.bakta_keep_contig_headers) args_list << "--keep-contig-headers"
            if (params.bakta_locus_tag) args_list << "--locus-tag ${params.bakta_locus_tag}"
            
            return args_list.join(' ')
        }
    }

    withName: VADR_POST_CLEANUP {
        publishDir = [
            path: { "${params.output_dir}/${params.vadr_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    
}