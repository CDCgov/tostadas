/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: METADATA_VALIDATION {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.val_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: LIFTOFF_CLI {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/liftoff" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{gff,gff3,txt}"
        ]
    }

    withName: REPEATMASKER {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/repeatmasker" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{gff,gff3,txt}"
        ]
    }

    withName: CONCAT_GFFS {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.final_liftoff_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*" // module outputs directories
        ]
    }

    withName: VADR_TRIM {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/vadr" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }

    withName: VADR_ANNOTATION {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/vadr" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }

    withName: VADR_POST_CLEANUP {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.vadr_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "**/*"
        ]
    }

    withName: BAKTA_BAKTADBDOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.bakta_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "bakta_db*",
            enabled: params.save_reference
        ]
        ext.args = { 
            def args_list = []
            if (params.bakta_db_type) {
                args_list << "--type ${params.bakta_db_type}"
            } else {
                args_list << "--type light"
            }
            return args_list.join(' ')
        }
    }

    withName: BAKTA_BAKTA {
        publishDir = [
            [
                path: { "${params.outdir}/${params.metadata_basename}/${params.bakta_output_dir}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*.{gff3,gbff,embl,fna,faa,tsv,txt}"
            ],
            [
                path: { "${params.outdir}/${params.metadata_basename}/${params.bakta_output_dir}" },
                mode: params.publish_dir_mode,
                pattern: "*.{svg,png}",
                enabled: !params.bakta_skip_plot
            ]
        ]
        ext.args = { 
            def args_list = []
            
            if (params.bakta_skip_trna) args_list << "--skip-trna"
            if (params.bakta_skip_tmrna) args_list << "--skip-tmrna"
            if (params.bakta_skip_rrna) args_list << "--skip-rrna"
            if (params.bakta_skip_ncrna) args_list << "--skip-ncrna"
            if (params.bakta_skip_ncrna_region) args_list << "--skip-ncrna-region"
            if (params.bakta_skip_crispr) args_list << "--skip-crispr"
            if (params.bakta_skip_cds) args_list << "--skip-cds"
            if (params.bakta_skip_sorf) args_list << "--skip-sorf"
            if (params.bakta_skip_gap) args_list << "--skip-gap"
            if (params.bakta_skip_ori) args_list << "--skip-ori"
            if (params.bakta_compliant) args_list << "--compliant"
            if (params.bakta_complete) args_list << "--complete"
            if (params.bakta_skip_plot) args_list << "--skip-plot"
            if (params.bakta_keep_contig_headers) args_list << "--keep-contig-headers"
            if (params.bakta_locus_tag) args_list << "--locus-tag ${params.bakta_locus_tag}"
            
            return args_list.join(' ')
        }
    }

    withName: PREP_SUBMISSION {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.submission_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }

    withName: SUBMIT_SUBMISSION {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.submission_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }

    withName: FETCH_REPORTS {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.final_submission_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }

    withName: AGGREGATE_REPORTS {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.final_submission_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{html,json,txt,tsv,csv}"
        ]
    }

    withName: JOIN_ACCESSIONS_WITH_METADATA {
        publishDir = [
            path: { "${params.outdir}/${params.metadata_basename}/${params.final_submission_output_dir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{xls,xlsx,html,json,txt,tsv,csv}"
        ]
    }

    // // Default resource requirements
    // withLabel: 'process_single' {
    //     cpus   = { check_max( 1                  , 'cpus'    ) }
    //     memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
    //     time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    // }
    
    // withLabel: 'process_low' {
    //     cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
    //     memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
    //     time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    // }
    
    // withLabel: 'process_medium' {
    //     cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
    //     memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
    //     time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    // }
    
    // withLabel: 'process_high' {
    //     cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
    //     memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
    //     time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    // }
    
    // withLabel: 'process_long' {
    //     time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    // }
    
    // withLabel: 'process_high_memory' {
    //     memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    // }
}