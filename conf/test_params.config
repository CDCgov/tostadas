/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                    TEST PARAMS SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
params {

        help = false

        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                PATHS FOR NECESSARY FILES
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        if ( params.virus ) { 
                bacteria               = false
                if ( params.'variola' ) {
                        // FOR VARV
                        fasta_path      = "${projectDir}/assets/sample_fastas/variola/"
                        ref_fasta_path  = "${projectDir}/assets/ref/varv_ref_v6.fasta"
                        meta_path       = "${projectDir}/assets/sample_metadata/VARV_metadata_Sample_Run_1.xlsx"
                        ref_gff_path    = "${projectDir}/assets/ref/varv_ref_v7.gff3"
                        env_yml         = "${projectDir}/environment.yml"
        	        repeat_library  = "${projectDir}/assets/ref/varv_ref_v6.fasta"
                }
                else  {
                        // FOR MPOX
                        fasta_path      = "${projectDir}/assets/sample_fastas/mpox/"
                        ref_fasta_path  = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.fasta"
                        meta_path       = "${projectDir}/assets/custom_meta_fields/custom_fields_MPXV_metadata_Sample_Run_1.xlsx"
                        ref_gff_path    = "${projectDir}/assets/ref/ref.MPXV.NC063383.v7.gff"
                        repeat_library  = "${projectDir}/assets/lib/MPOX_repeats_lib.fasta"
                }
        }
        // To Do figure out if we need all these params
        if ( params.bacteria) {
                fasta_path              = "$projectDir/assets/sample_fastas/bacteria/"
                bakta_db_path           = ""
                ref_gff_path            = "random"
                ref_fasta_path          = "random"
                meta_path               = "$projectDir/assets/sample_metadata/bacteria_metadata.xlsx"
                env_yml                 = "$projectDir/environment.yml"
                db_version              = "light" // can be light (3 GB) or full (30 GB)
                virus                   = false
        }
        
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                COMPUTE ENV 
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        env_yml                         = "${projectDir}/environment.yml"
        scicomp                         = false
        // To Do add these directly to modules
        docker_container                = 'staphb/tostadas:latest'
        docker_container_vadr           = 'staphb/vadr:latest'
        docker_container_bakta          = 'quay.io/biocontainers/bakta:1.8.2--pyhdfd78af_0'
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ANNOTATION SUBWORKFLOW 
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        annotation                      = true
        if ( params.virus) {
                repeatmasker_liftoff    = true
                vadr                    = false
                liftoff                 = false
        }
        if ( params.bacteria) {
                bakta                   = true
        }
        
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                CLEANUP SUBWORKFLOW
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        cleanup                        = true
        clear_nextflow_log             = false
        clear_work_dir                 = false
        clear_conda_env                = false
        clear_nf_results               = false

        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                GENERAL OUTPUT
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        output_dir                     = 'test_output'
        overwrite_output               = true
        
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                VALIDATION   
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        val_output_dir                 = 'validation_outputs'
        val_date_format_flag           = 's'
        val_keep_pi                    = false
        validate_custom_fields         = false
        custom_fields_file             = "${projectDir}/assets/custom_meta_fields/example_custom_fields.json"
        
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                LIFTOFF
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        final_liftoff_output_dir       = 'liftoff_outputs' // only for liftoff
        lift_print_version_exit        = false // only for liftoff
        lift_print_help_exit           = false // only for liftoff
        lift_parallel_processes        = 8
        lift_delete_temp_files         = 'true' // only for liftoff
        lift_coverage_threshold        = 0.5
        lift_child_feature_align_threshold = 0.5
        lift_unmapped_features_file_name = 'output.unmapped_features.txt'
        lift_copy_threshold            = 1.0
        lift_distance_scaling_factor   = 2.0
        lift_flank                     = 0.0
        lift_overlap                   = 0.1
        lift_mismatch                  = 2
        lift_gap_open                  = 2
        lift_gap_extend                = 1
        lift_infer_transcripts         = 'false'
        lift_infer_genes               = 'false'
        lift_copies                    = 'false'
        lift_minimap_path              = 'N/A' // if empty must be denoted as N/A or n/a or None
        lift_feature_database_name     = 'N/A' // if empty must be denoted as N/A or n/a or None
        lift_feature_types             = "${projectDir}/assets/feature_types.txt" // only for liftoff_cli
        
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                VADR
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        vadr_output_dir                = 'vadr_outputs'
        vadr_models_dir                = "${projectDir}/vadr_files/mpxv-models"
        
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                BAKTA
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        bakta_output_dir               = "bakta_outputs"
        bakta_db_type                  = "light" // light or full
        download_bakta_db              = false
        bakta_db_path                  = ""
        bakta_min_contig_length        = 200 // due to compliant mode default, otherwise default is 1
        bakta_genus                    = "Genus"
        bakta_species                  = "species"
        bakta_strain                   = "strain"
        bakta_plasmid                  = "unnamed"
        bakta_complete                 = ""
        bakta_compliant                = ""
        bakta_translation_table        = 11
        bakta_gram                     = "?" 
        bakta_locus                    = "contig"
        bakta_locus_tag                = "LOCUSTAG123" // set a meaningful locus tag here for compliant mode
        bakta_keep_contig_headers      = ""
        // optional bakta params, for now need to add these to modules/nf-core/bakta/bakta/main.nf
        bakta_prodigal_df               = ""
        bakta_replicons                 = ""
        bakta_proteins                  = ""
        bakta_skip_trna                 = ""
        bakta_skip_tmrna                = ""
        bakta_skip_rrna                 = ""
        bakta_skip_ncrna                = ""
        bakta_skip_ncrna_region         = ""
        bakta_skip_crispr               = ""
        bakta_skip_cds                  = ""
        bakta_skip_pseudo               = ""
        bakta_skip_sorf                 = ""
        bakta_skip_gap                  = ""
        bakta_skip_ori                  = ""
        bakta_skip_plot                 = ""
 
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                SUBMISSION
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        // general
        submission                     = true
        submission_output_dir          = "submission_outputs"
        submission_prod_or_test        = 'test'
        submission_wait_time           = 'calc'
        send_submission_email          = false
        submission_config              = "${projectDir}/bin/config_files/mpxv_config_kk.yaml" 
        req_col_config                 = "${projectDir}/bin/default_config_files/required_columns.yaml"
        submission_database            = "submit"  // must be either: 'submit' (follows existing config), 'genbank', 'sra', 'gisaid', 'biosample', 'joint_sra_biosample', or 'all'
        batch_name                     = "batch1"

        // for update_submission:
        processed_samples              = "${projectDir}/$output_dir/$submission_output_dir"
        
        // To Do reevaluate these entrypoints
        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ENTRYPOINTS (SUBMISSION + ONLY_INITIAL_SUBMISSION) / USER PROVIDED ANNOTATIONS DIRECT PATHS 
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */
        if ( params.variola ) {
                final_annotated_files_path = "${projectDir}/assets/gffs/variola_split_gffs"
                final_split_fastas_path = "${projectDir}/assets/sample_fastas/variola"
                final_split_metas_path = "${projectDir}/$output_dir/$val_output_dir/VARV_metadata_Sample_Run_1/tsv_per_sample"
        } else {
                final_annotated_files_path = "${projectDir}/assets/gffs/mpox_split_gffs"
                final_split_fastas_path = "${projectDir}/assets/sample_fastas/mpox"
                final_split_metas_path = "${projectDir}/$output_dir/$val_output_dir/custom_fields_MPXV_metadata_Sample_Run_1/tsv_per_sample"
        }
}
